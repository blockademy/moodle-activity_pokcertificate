{"version":3,"file":"paged_content_paging_bar.min.js","sources":["../src/paged_content_paging_bar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to enhance the paged content paging bar.\n *\n * @module     mod_pokcertificate/paged_content_paging_bar\n * @copyright  2023 Moodle India Information Solutions Pvt Ltd\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n    [\n        'jquery',\n        'core/custom_interaction_events',\n        'core/paged_content_events',\n        'core/str',\n        'core/pubsub'\n    ],\n    function(\n        $,\n        CustomEvents,\n        PagedContentEvents,\n        Str,\n        PubSub\n    ) {\n\n    var SELECTORS = {\n        ROOT: '[data-region=\"paging-bar\"]',\n        PAGE: '[data-page]',\n        PAGE_ITEM: '[data-region=\"page-item\"]',\n        PAGE_LINK: '[data-region=\"page-link\"]',\n        FIRST_BUTTON: '[data-control=\"first\"]',\n        LAST_BUTTON: '[data-control=\"last\"]',\n        NEXT_BUTTON: '[data-control=\"next\"]',\n        PREVIOUS_BUTTON: '[data-control=\"previous\"]'\n    };\n\n    /**\n     * Get the page element by number.\n     *\n     * @param {object} root The root element.\n     * @param {Number} pageNumber The page number.\n     * @return {jQuery}\n     */\n    var getPageByNumber = function(root, pageNumber) {\n        return root.find(SELECTORS.PAGE_ITEM + '[data-page-number=\"' + pageNumber + '\"]');\n    };\n\n    /**\n     * Get the next button element.\n     *\n     * @param {object} root The root element.\n     * @return {jQuery}\n     */\n    var getNextButton = function(root) {\n        return root.find(SELECTORS.NEXT_BUTTON);\n    };\n\n    /**\n     * Set the last page number after which no more pages\n     * should be loaded.\n     *\n     * @param {object} root The root element.\n     * @param {Number} number Page number.\n     */\n    var setLastPageNumber = function(root, number) {\n        root.attr('data-last-page-number', number);\n    };\n\n    /**\n     * Get the last page number.\n     *\n     * @param {object} root The root element.\n     * @return {Number}\n     */\n    var getLastPageNumber = function(root) {\n        return parseInt(root.attr('data-last-page-number'), 10);\n    };\n\n    /**\n     * Get the active page number.\n     *\n     * @param {object} root The root element.\n     * @returns {Number} The page number\n     */\n    var getActivePageNumber = function(root) {\n        return parseInt(root.attr('data-active-page-number'), 10);\n    };\n\n    /**\n     * Set the active page number.\n     *\n     * @param {object} root The root element.\n     * @param {Number} number Page number.\n     */\n    var setActivePageNumber = function(root, number) {\n        root.attr('data-active-page-number', number);\n    };\n\n    /**\n     * Check if there is an active page number.\n     *\n     * @param {object} root The root element.\n     * @returns {bool}\n     */\n    var hasActivePageNumber = function(root) {\n        var number = getActivePageNumber(root);\n        return !isNaN(number) && number != 0;\n    };\n\n    /**\n     * Get the page number for a given page.\n     *\n     * @param {object} root The root element.\n     * @param {object} page The page element.\n     * @returns {Number} The page number\n     */\n    var getPageNumber = function(root, page) {\n        if (page.attr('data-page') != undefined) {\n            // If it's an actual page then we can just use the page number\n            // attribute.\n            return parseInt(page.attr('data-page-number'), 10);\n        }\n        var pageNumber = 1;\n        var activePageNumber = null;\n        switch (page.attr('data-control')) {\n            case 'first':\n                pageNumber = 1;\n                break;\n\n            case 'last':\n                pageNumber = getLastPageNumber(root);\n                break;\n\n            case 'next':\n                activePageNumber = getActivePageNumber(root);\n                var lastPage = getLastPageNumber(root);\n                if (!lastPage) {\n                    pageNumber = activePageNumber + 1;\n                } else if (activePageNumber && activePageNumber < lastPage) {\n                    pageNumber = activePageNumber + 1;\n                } else {\n                    pageNumber = lastPage;\n                }\n                break;\n\n            case 'previous':\n                activePageNumber = getActivePageNumber(root);\n                if (activePageNumber && activePageNumber > 1) {\n                    pageNumber = activePageNumber - 1;\n                } else {\n                    pageNumber = 1;\n                }\n                break;\n\n            default:\n                pageNumber = 1;\n                break;\n        }\n\n        // Make sure we return an int not a string.\n        return parseInt(pageNumber, 10);\n    };\n\n    /**\n     * Get the limit of items for each page.\n     *\n     * @param {object} root The root element.\n     * @returns {Number}\n     */\n    var getLimit = function(root) {\n        return parseInt(root.attr('data-items-per-page'), 10);\n    };\n\n    /**\n     * Set the limit of items for each page.\n     *\n     * @param {object} root The root element.\n     * @param {Number} limit Items per page limit.\n     */\n    var setLimit = function(root, limit) {\n        root.attr('data-items-per-page', limit);\n    };\n\n    /**\n     * Show the paging bar.\n     *\n     * @param {object} root The root element.\n     */\n    var show = function(root) {\n        root.removeClass('hidden');\n    };\n\n    /**\n     * Hide the paging bar.\n     *\n     * @param {object} root The root element.\n     */\n    var hide = function(root) {\n        root.addClass('hidden');\n    };\n\n    /**\n     * Disable the next and last buttons in the paging bar.\n     *\n     * @param {object} root The root element.\n     */\n    var disableNextControlButtons = function(root) {\n        var nextButton = root.find(SELECTORS.NEXT_BUTTON);\n        var lastButton = root.find(SELECTORS.LAST_BUTTON);\n\n        nextButton.addClass('disabled');\n        nextButton.attr('aria-disabled', true);\n        lastButton.addClass('disabled');\n        lastButton.attr('aria-disabled', true);\n    };\n\n    /**\n     * Enable the next and last buttons in the paging bar.\n     *\n     * @param {object} root The root element.\n     */\n    var enableNextControlButtons = function(root) {\n        var nextButton = root.find(SELECTORS.NEXT_BUTTON);\n        var lastButton = root.find(SELECTORS.LAST_BUTTON);\n\n        nextButton.removeClass('disabled');\n        nextButton.removeAttr('aria-disabled');\n        lastButton.removeClass('disabled');\n        lastButton.removeAttr('aria-disabled');\n    };\n\n    /**\n     * Disable the previous and first buttons in the paging bar.\n     *\n     * @param {object} root The root element.\n     */\n    var disablePreviousControlButtons = function(root) {\n        var previousButton = root.find(SELECTORS.PREVIOUS_BUTTON);\n        var firstButton = root.find(SELECTORS.FIRST_BUTTON);\n\n        previousButton.addClass('disabled');\n        previousButton.attr('aria-disabled', true);\n        firstButton.addClass('disabled');\n        firstButton.attr('aria-disabled', true);\n    };\n\n    /**\n     * Enable the previous and first buttons in the paging bar.\n     *\n     * @param {object} root The root element.\n     */\n    var enablePreviousControlButtons = function(root) {\n        var previousButton = root.find(SELECTORS.PREVIOUS_BUTTON);\n        var firstButton = root.find(SELECTORS.FIRST_BUTTON);\n\n        previousButton.removeClass('disabled');\n        previousButton.removeAttr('aria-disabled');\n        firstButton.removeClass('disabled');\n        firstButton.removeAttr('aria-disabled');\n    };\n\n    /**\n     * Get the components for a get_string request for the aria-label\n     * on a page. The value is a comma separated string of key and\n     * component.\n     *\n     * @param {object} root The root element.\n     * @return {array} First element is the key, second is the component.\n     */\n    var getPageAriaLabelComponents = function(root) {\n        var componentString = root.attr('data-aria-label-components-pagination-item');\n        var components = componentString.split(',').map(function(component) {\n            return component.trim();\n        });\n        return components;\n    };\n\n    /**\n     * Get the components for a get_string request for the aria-label\n     * on an active page. The value is a comma separated string of key and\n     * component.\n     *\n     * @param {object} root The root element.\n     * @return {array} First element is the key, second is the component.\n     */\n    var getActivePageAriaLabelComponents = function(root) {\n        var componentString = root.attr('data-aria-label-components-pagination-active-item');\n        var components = componentString.split(',').map(function(component) {\n            return component.trim();\n        });\n        return components;\n    };\n\n    /**\n     * Set page numbers on each of the given items. Page numbers are set\n     * from 1..n (where n is the number of items).\n     *\n     * Sets the active page number to be the last page found with\n     * an \"active\" class (if any).\n     *\n     * Sets the last page number.\n     *\n     * @param {object} root The root element.\n     * @param {jQuery} items A jQuery list of items.\n     */\n    var generatePageNumbers = function(root, items) {\n        var lastPageNumber = 0;\n        setActivePageNumber(root, 0);\n\n        items.each(function(index, item) {\n            var pageNumber = index + 1;\n            item = $(item);\n            item.attr('data-page-number', pageNumber);\n            lastPageNumber++;\n\n            if (item.hasClass('active')) {\n                setActivePageNumber(root, pageNumber);\n            }\n        });\n\n        setLastPageNumber(root, lastPageNumber);\n    };\n\n    /**\n     * Set the aria-labels on each of the page items in the paging bar.\n     * This includes the next, previous, first, and last items.\n     *\n     * @param {object} root The root element.\n     */\n    var generateAriaLabels = function(root) {\n        var pageAriaLabelComponents = getPageAriaLabelComponents(root);\n        var activePageAriaLabelComponents = getActivePageAriaLabelComponents(root);\n        var activePageNumber = getActivePageNumber(root);\n        var pageItems = root.find(SELECTORS.PAGE_ITEM);\n        // We want to request all of the strings at once rather than\n        // one at a time.\n        var stringRequests = pageItems.map(function(index, page) {\n            page = $(page);\n            var pageNumber = getPageNumber(root, page);\n\n            if (pageNumber === activePageNumber) {\n                return {\n                    key: activePageAriaLabelComponents[0],\n                    component: activePageAriaLabelComponents[1],\n                    param: pageNumber\n                };\n            } else {\n                return {\n                    key: pageAriaLabelComponents[0],\n                    component: pageAriaLabelComponents[1],\n                    param: pageNumber\n                };\n            }\n        });\n\n        Str.get_strings(stringRequests).then(function(strings) {\n            pageItems.each(function(index, page) {\n                page = $(page);\n                var string = strings[index];\n                page.attr('aria-label', string);\n                page.find(SELECTORS.PAGE_LINK).attr('aria-label', string);\n            });\n\n            return strings;\n        })\n        .catch(function() {\n            // No need to interrupt the page if we can't load the aria lang strings.\n            return;\n        });\n    };\n\n    /**\n     * Make the paging bar item for the given page number visible and fire\n     * the SHOW_PAGES paged content event to tell any listening content to\n     * update.\n     *\n     * @param {object} root The root element.\n     * @param {Number} pageNumber The number for the page to show.\n     * @param {string} id A uniqie id for this instance.\n     */\n    var showPage = function(root, pageNumber, id) {\n        var lastPageNumber = getLastPageNumber(root);\n        var isSamePage = pageNumber == getActivePageNumber(root);\n        var limit = getLimit(root);\n        var offset = (pageNumber - 1) * limit;\n\n        if (!isSamePage) {\n\n            // We only need to toggle the active class if the user didn't click\n            // on the already active page.\n            root.find(SELECTORS.PAGE_ITEM).removeClass('active').removeAttr('aria-current');\n            for (var i = 1; i <= lastPageNumber; i++) {\n                if(i == lastPageNumber-1 && lastPageNumber > 8){\n                    var page = getPageByNumber(root, '...');\n                }else{\n                    var page = getPageByNumber(root, i);\n                }\n\n                if(pageNumber == i){\n                    page.addClass('active');\n                    page.attr('aria-current', true);\n                }\n\n                if(pageNumber > 0 && lastPageNumber > 8){\n                    var minvalues = pageNumber-2;\n                    var lastPageNumberbutone = lastPageNumber-1;\n                    var diff = lastPageNumberbutone - pageNumber;\n                    if(diff < 4 ){\n                        if(diff == 1){\n                            minvalues = minvalues - 3;\n                        }else if(diff == 2){\n                            minvalues = minvalues - 2;\n                        }else if(diff == 3){\n                            minvalues = minvalues - 1;\n                        }else if(lastPageNumber == pageNumber){\n                            minvalues = minvalues - 5;\n                        }else{\n                            minvalues = minvalues - 4;\n                        }\n                    }\n\n                    var maxvalues = pageNumber+3;\n\n                    if(pageNumber < 5){\n                        if(pageNumber == 4){\n                            maxvalues = maxvalues + 1;\n                        }else if(pageNumber == 3){\n                            maxvalues = maxvalues + 2;\n                        }else if(pageNumber == 2){\n                            maxvalues = maxvalues + 3;\n                        }else if(pageNumber == 1){\n                            maxvalues = maxvalues + 4;\n                        }\n                        var secondpage = $('[data-page-number=\"' + 2 + '\"]').find('[data-region=\"page-link\"]');\n                        secondpage.html(2);\n\n                        var prevpagenumber = lastPageNumber-1;\n                        var lastbutonepage = $('[data-page-number=\"' + prevpagenumber + '\"]').find('[data-region=\"page-link\"]');\n                        lastbutonepage.html('...');\n                    }\n\n                    if(maxvalues > lastPageNumber){\n                        maxvalues = lastPageNumber;\n                    }\n                    if(i >= minvalues && pageNumber >= i || maxvalues >= i  && i >= pageNumber){\n                        page.removeClass('hidden');\n                    }else{\n                        if(i != lastPageNumber && i > 2){\n                            page.addClass('hidden');\n                        }\n                    }\n                }\n\n                //adding dots\n                if(pageNumber > 5 && lastPageNumber > 8){\n                    var prevpagenumber = lastPageNumber-1;\n                    var lastbutonepage = $('[data-page-number=\"' + prevpagenumber + '\"]').find('[data-region=\"page-link\"]');\n                    var lastPageNumberbutone = lastPageNumber-1;\n                    var diff = lastPageNumberbutone - pageNumber;\n\n                    if(pageNumber == prevpagenumber){\n                        lastbutonepage.html(prevpagenumber);\n                        $('[data-page-number=\"' + prevpagenumber + '\"]').addClass('active');\n                    }else{\n                        if(diff < 4){\n                            lastbutonepage.html(prevpagenumber);\n                        }else{\n                            lastbutonepage.html('...');\n                        }\n                    }\n\n                    var secondpagenumber = 2;\n                    var secondpage = $('[data-page-number=\"' + 2 + '\"]').find('[data-region=\"page-link\"]');\n                    if(pageNumber == secondpagenumber){\n                        secondpage.html(pageNumber);\n                    }else{\n                        secondpage.html('...');\n                    }\n                }\n\n\n            }\n            setActivePageNumber(root, pageNumber);\n        }\n\n        // Make sure the control buttons are disabled as the user navigates\n        // to either end of the limits.\n        if (lastPageNumber && pageNumber >= lastPageNumber) {\n            disableNextControlButtons(root);\n        } else {\n            enableNextControlButtons(root);\n        }\n\n        if (pageNumber > 1) {\n            enablePreviousControlButtons(root);\n        } else {\n            disablePreviousControlButtons(root);\n        }\n\n        generateAriaLabels(root);\n\n        // This event requires a payload that contains a list of all pages that\n        // were activated. In the case of the paging bar we only show one page at\n        // a time.\n        PubSub.publish(id + PagedContentEvents.SHOW_PAGES, [{\n            pageNumber: pageNumber,\n            limit: limit,\n            offset: offset\n        }]);\n    };\n\n    /**\n     * Add event listeners for interactions with the paging bar as well as listening\n     * for custom paged content events.\n     *\n     * Each event will trigger different logic to update parts of the paging bar's\n     * display.\n     *\n     * @param {object} root The root element.\n     * @param {string} id A uniqie id for this instance.\n     */\n    var registerEventListeners = function(root, id) {\n        var ignoreControlWhileLoading = root.attr('data-ignore-control-while-loading');\n        var loading = false;\n\n        if (ignoreControlWhileLoading == \"\") {\n            // Default to ignoring control while loading if not specified.\n            ignoreControlWhileLoading = true;\n        }\n\n        CustomEvents.define(root, [\n            CustomEvents.events.activate\n        ]);\n\n        root.on(CustomEvents.events.activate, SELECTORS.PAGE_ITEM, function(e, data) {\n            data.originalEvent.preventDefault();\n            data.originalEvent.stopPropagation();\n\n            if (ignoreControlWhileLoading && loading) {\n                // Do nothing if configured to ignore control while loading.\n                return;\n            }\n\n            var page = $(e.target).closest(SELECTORS.PAGE_ITEM);\n\n            if (!page.hasClass('disabled')) {\n                var pageNumber = getPageNumber(root, page);\n                showPage(root, pageNumber, id);\n                loading = true;\n            }\n        });\n\n        // This event is fired when all of the items have been loaded. Typically used\n        // in an \"infinite\" pages context when we don't know the exact number of pages\n        // ahead of time.\n        PubSub.subscribe(id + PagedContentEvents.ALL_ITEMS_LOADED, function(pageNumber) {\n            loading = false;\n            var currentLastPage = getLastPageNumber(root);\n\n            if (!currentLastPage || pageNumber < currentLastPage) {\n                // Somehow the value we've got saved is higher than the new\n                // value we just received. Perhaps events came out of order.\n                // In any case, save the lowest value.\n                setLastPageNumber(root, pageNumber);\n            }\n\n            if (pageNumber === 1 && root.attr('data-hide-control-on-single-page')) {\n                // If all items were loaded on the first page then we can hide\n                // the paging bar because there are no other pages to load.\n                hide(root);\n                disableNextControlButtons(root);\n                disablePreviousControlButtons(root);\n            } else {\n                show(root);\n                disableNextControlButtons(root);\n            }\n        });\n\n        // This event is fired after all of the requested pages have been rendered.\n        PubSub.subscribe(id + PagedContentEvents.PAGES_SHOWN, function() {\n            // All pages have been shown so turn off the loading flag.\n            loading = false;\n        });\n\n        // This is triggered when the paging limit is modified.\n        PubSub.subscribe(id + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT, function(limit) {\n            // Update the limit.\n            setLimit(root, limit);\n            setLastPageNumber(root, 0);\n            setActivePageNumber(root, 0);\n            show(root);\n            // Reload the data from page 1 again.\n            showPage(root, 1, id);\n        });\n    };\n\n    /**\n     * Initialise the paging bar.\n     * @param {object} root The root element.\n     * @param {string} id A uniqie id for this instance.\n     */\n    var init = function(root, id) {\n        root = $(root);\n        var pages = root.find(SELECTORS.PAGE);\n        generatePageNumbers(root, pages);\n        registerEventListeners(root, id);\n\n        if (hasActivePageNumber(root)) {\n            var activePageNumber = getActivePageNumber(root);\n            // If the the paging bar was rendered with an active page selected\n            // then make sure we fired off the event to tell the content page to\n            // show.\n            getPageByNumber(root, activePageNumber).click();\n            if (activePageNumber == 1) {\n                // If the first page is active then disable the previous buttons.\n                disablePreviousControlButtons(root);\n            }\n        } else {\n            // There was no active page number so load the first page using\n            // the next button. This allows the infinite pagination to work.\n            getNextButton(root).click();\n        }\n    };\n\n    return {\n        init: init,\n        showPage: showPage,\n        rootSelector: SELECTORS.ROOT,\n    };\n});\n"],"names":["define","$","CustomEvents","PagedContentEvents","Str","PubSub","SELECTORS","getPageByNumber","root","pageNumber","find","setLastPageNumber","number","attr","getLastPageNumber","parseInt","getActivePageNumber","setActivePageNumber","getPageNumber","page","undefined","activePageNumber","lastPage","show","removeClass","disableNextControlButtons","nextButton","lastButton","addClass","disablePreviousControlButtons","previousButton","firstButton","showPage","id","lastPageNumber","isSamePage","limit","getLimit","offset","removeAttr","i","minvalues","diff","maxvalues","secondpage","html","lastbutonepage","prevpagenumber","enableNextControlButtons","enablePreviousControlButtons","pageAriaLabelComponents","split","map","component","trim","getPageAriaLabelComponents","activePageAriaLabelComponents","getActivePageAriaLabelComponents","pageItems","stringRequests","index","key","param","get_strings","then","strings","each","string","catch","generateAriaLabels","publish","SHOW_PAGES","init","pages","items","item","hasClass","generatePageNumbers","ignoreControlWhileLoading","loading","events","activate","on","e","data","originalEvent","preventDefault","stopPropagation","target","closest","subscribe","ALL_ITEMS_LOADED","currentLastPage","hide","PAGES_SHOWN","SET_ITEMS_PER_PAGE_LIMIT","setLimit","registerEventListeners","isNaN","hasActivePageNumber","click","getNextButton","rootSelector"],"mappings":"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"}